"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fuzzy = require("fuzzy");
var auth_1 = require("./auth");
var manifest_1 = require("./manifest");
var utils_1 = require("./utils");
// setup inquirer
var inquirer = require('inquirer');
var prompt = inquirer.prompt;
/**
 * Prompts for the function name.
 */
function getFunctionNames(script, scriptId) {
    return __awaiter(this, void 0, void 0, function () {
        var content, files, functionNames, answers;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    utils_1.spinner.setSpinnerTitle("Getting functions").start();
                    return [4 /*yield*/, script.projects.getContent({
                            scriptId: scriptId,
                        })];
                case 1:
                    content = _a.sent();
                    utils_1.spinner.stop(true);
                    if (content.status !== 200) {
                        utils_1.logError(content.statusText);
                        throw Error();
                    }
                    files = content.data.files || [];
                    functionNames = files
                        .reduce(function (functions, file) {
                        if (!file.functionSet || !file.functionSet.values)
                            return functions;
                        return functions.concat(file.functionSet.values);
                    }, [])
                        .map(function (func) { return func.name; });
                    return [4 /*yield*/, prompt([{
                                name: 'functionName',
                                message: 'Select a functionName',
                                type: 'autocomplete',
                                source: function (answers, input) {
                                    if (input === void 0) { input = ''; }
                                    // Returns a Promise
                                    // https://www.npmjs.com/package/inquirer-autocomplete-prompt#options
                                    return new Promise(function (resolve) {
                                        // Example: https://github.com/mokkabonna/inquirer-autocomplete-prompt/blob/master/example.js#L76
                                        var filtered = fuzzy.filter(input, functionNames);
                                        var original = filtered.map(function (el) {
                                            return el.original;
                                        });
                                        resolve(original);
                                    });
                                },
                            }])];
                case 2:
                    answers = _a.sent();
                    return [2 /*return*/, answers.functionName];
            }
        });
    });
}
exports.getFunctionNames = getFunctionNames;
/**
 * Gets the project ID from the manifest. If there is no project ID, it returns an error.
 */
function getProjectIdWithErrors() {
    return __awaiter(this, void 0, void 0, function () {
        var projectId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.getProjectId()];
                case 1:
                    projectId = _a.sent();
                    if (!projectId)
                        throw utils_1.logError(null, utils_1.ERROR.NO_GCLOUD_PROJECT);
                    return [2 /*return*/, projectId];
            }
        });
    });
}
exports.getProjectIdWithErrors = getProjectIdWithErrors;
/**
 * Returns true if the service is enabled for the Google Cloud Project.
 * @param {string} serviceName The service name.
 * @returns {boolean} True if the service is enabled.
 */
function isEnabled(serviceName) {
    return __awaiter(this, void 0, void 0, function () {
        var serviceDetails;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, auth_1.serviceUsage.services.get({ name: serviceName })];
                case 1:
                    serviceDetails = _a.sent();
                    return [2 /*return*/, serviceDetails.data.state === 'ENABLED'];
            }
        });
    });
}
exports.isEnabled = isEnabled;
/**
 * Enables or disables a Google API.
 * @param {string} serviceName The name of the service. i.e. sheets
 * @param {boolean} enable Enables the API if true, otherwise disables.
 */
function enableOrDisableAPI(serviceName, enable) {
    return __awaiter(this, void 0, void 0, function () {
        var projectId, name, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!serviceName) {
                        utils_1.logError(null, 'An API name is required. Try sheets');
                    }
                    return [4 /*yield*/, getProjectIdWithErrors()];
                case 1:
                    projectId = _a.sent();
                    name = "projects/" + projectId + "/services/" + serviceName + ".googleapis.com";
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 8, , 9]);
                    if (!enable) return [3 /*break*/, 4];
                    return [4 /*yield*/, auth_1.serviceUsage.services.enable({ name: name })];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, auth_1.serviceUsage.services.disable({ name: name })];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6: return [4 /*yield*/, manifest_1.enableOrDisableAdvanceServiceInManifest(serviceName, enable)];
                case 7:
                    _a.sent();
                    console.log((enable ? 'Enable' : 'Disable') + "d " + serviceName + " API.");
                    return [3 /*break*/, 9];
                case 8:
                    e_1 = _a.sent();
                    // If given non-existent API (like fakeAPI, it throws 403 permission denied)
                    // We will log this for the user instead:
                    console.log(e_1);
                    utils_1.logError(null, utils_1.ERROR.NO_API(enable, serviceName));
                    return [3 /*break*/, 9];
                case 9: return [2 /*return*/];
            }
        });
    });
}
exports.enableOrDisableAPI = enableOrDisableAPI;
/**
 * Enable 'script.googleapis.com' of Google API.
 */
function enableAppsScriptAPI() {
    return __awaiter(this, void 0, void 0, function () {
        var projectId, name;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, auth_1.loadAPICredentials()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, getProjectIdWithErrors()];
                case 2:
                    projectId = _a.sent();
                    name = "projects/" + projectId + "/services/script.googleapis.com";
                    return [4 /*yield*/, auth_1.serviceUsage.services.enable({ name: name })];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.enableAppsScriptAPI = enableAppsScriptAPI;
