"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var apis_1 = require("./apis");
var apiutils_1 = require("./apiutils");
var dotfile_1 = require("./dotfile");
var utils_1 = require("./utils");
/**
 * Checks if the rootDir appears to be a valid project.
 * @return {boolean} True if valid project, false otherwise
 */
exports.manifestExists = function (rootDir) {
    if (rootDir === void 0) { rootDir = dotfile_1.DOT.PROJECT.DIR; }
    return fs.existsSync(path.join(rootDir, utils_1.PROJECT_MANIFEST_FILENAME));
};
/**
 * Reads the appsscript.json manifest file.
 * @returns {Promise<Manifest>} A promise to get the manifest file as object.
 * @see https://developers.google.com/apps-script/concepts/manifests
 */
function readManifest() {
    return __awaiter(this, void 0, void 0, function () {
        var rootDir, manifest;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.getProjectSettings()];
                case 1:
                    rootDir = (_a.sent()).rootDir;
                    if (typeof rootDir === 'undefined')
                        rootDir = dotfile_1.DOT.PROJECT.DIR;
                    manifest = path.join(rootDir, utils_1.PROJECT_MANIFEST_FILENAME);
                    try {
                        return [2 /*return*/, JSON.parse(fs.readFileSync(manifest, 'utf8'))];
                    }
                    catch (err) {
                        utils_1.logError(null, utils_1.ERROR.NO_MANIFEST(manifest));
                        throw Error('Could not read the manifest file.'); // TODO standardize errors.
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.readManifest = readManifest;
/**
 * Writes the appsscript.json manifest file.
 * @param {Manifest} manifest The new manifest to write.
 */
function writeManifest(manifest) {
    return __awaiter(this, void 0, void 0, function () {
        var rootDir, manifestFilePath;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.getProjectSettings()];
                case 1:
                    rootDir = (_a.sent()).rootDir;
                    if (typeof rootDir === 'undefined')
                        rootDir = dotfile_1.DOT.PROJECT.DIR;
                    manifestFilePath = path.join(rootDir, utils_1.PROJECT_MANIFEST_FILENAME);
                    try {
                        fs.writeFileSync(manifestFilePath, JSON.stringify(manifest, null, 2));
                    }
                    catch (err) {
                        utils_1.logError(null, utils_1.ERROR.FS_FILE_WRITE);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.writeManifest = writeManifest;
/**
 * Returns true if the manifest is valid.
 * The manifest is valid if it:
 * - It exists in the project root.
 * - Is valid JSON.
 */
function isValidManifest() {
    return __awaiter(this, void 0, void 0, function () {
        var rootDir, manifest, manifestJSON;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.getProjectSettings()];
                case 1:
                    rootDir = (_a.sent()).rootDir;
                    if (typeof rootDir === 'undefined')
                        rootDir = dotfile_1.DOT.PROJECT.DIR;
                    manifest = fs.readFileSync(path.join(rootDir, utils_1.PROJECT_MANIFEST_FILENAME), 'utf8');
                    try {
                        manifestJSON = JSON.parse(manifest);
                    }
                    catch (err) {
                        utils_1.logError(err, utils_1.ERROR.BAD_MANIFEST);
                        return [2 /*return*/, false];
                    }
                    return [2 /*return*/, true];
            }
        });
    });
}
exports.isValidManifest = isValidManifest;
/**
 * Adds a list of scopes to the manifest.
 * @param {string[]} scopes The list of explicit scopes
 */
function addScopeToManifest(scopes) {
    return __awaiter(this, void 0, void 0, function () {
        var manifest, oldScopes, newScopes, uniqueNewScopes;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, readManifest()];
                case 1:
                    manifest = _a.sent();
                    oldScopes = manifest.oauthScopes || [];
                    newScopes = oldScopes.concat(scopes);
                    uniqueNewScopes = Array.from(new Set(newScopes));
                    manifest.oauthScopes = uniqueNewScopes;
                    return [4 /*yield*/, writeManifest(manifest)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.addScopeToManifest = addScopeToManifest;
/**
 * Enables the Execution API in the Manifest.
 * The Execution API requires the manifest to have the "executionApi.access" field set.
 */
function enableExecutionAPI() {
    return __awaiter(this, void 0, void 0, function () {
        var manifest;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.log('Writing manifest');
                    return [4 /*yield*/, readManifest()];
                case 1:
                    manifest = _a.sent();
                    manifest.executionApi = manifest.executionApi || {
                        access: 'ANYONE',
                    };
                    return [4 /*yield*/, writeManifest(manifest)];
                case 2:
                    _a.sent();
                    console.log('Wrote manifest');
                    console.log('Checking Apps Script API');
                    return [4 /*yield*/, apiutils_1.isEnabled('script')];
                case 3:
                    if (!!(_a.sent())) return [3 /*break*/, 5];
                    console.log('Apps Script API is currently disabled. Enabling...');
                    return [4 /*yield*/, apiutils_1.enableOrDisableAPI('script', true)];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5:
                    console.log('Apps Script API is enabled.');
                    return [2 /*return*/];
            }
        });
    });
}
exports.enableExecutionAPI = enableExecutionAPI;
/**
 * Enables or disables a advanced service in the manifest.
 * @param serviceId {string} The id of the service that should be enabled or disabled.
 * @param enable {boolean} True if you want to enable a service. Disables otherwise.
 * @see PUBLIC_ADVANCED_SERVICES
 */
function enableOrDisableAdvanceServiceInManifest(serviceId, enable) {
    return __awaiter(this, void 0, void 0, function () {
        var manifest, newEnabledAdvancedServices, newAdvancedService;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, readManifest()];
                case 1:
                    manifest = _a.sent();
                    // Create objects if they don't exist.
                    if (!manifest.dependencies)
                        manifest.dependencies = {};
                    if (manifest.dependencies && !manifest.dependencies.enabledAdvancedServices) {
                        manifest.dependencies.enabledAdvancedServices = [];
                    }
                    newEnabledAdvancedServices = manifest.dependencies.enabledAdvancedServices || [];
                    // Disable the service (even if we may enable it)
                    newEnabledAdvancedServices = manifest.dependencies.enabledAdvancedServices || [];
                    newEnabledAdvancedServices = newEnabledAdvancedServices.filter(function (service) { return service.serviceId !== serviceId; });
                    // Enable the service
                    if (enable) {
                        newAdvancedService = apis_1.PUBLIC_ADVANCED_SERVICES.filter(function (service) { return service.serviceId === serviceId; })[0];
                        newEnabledAdvancedServices.push(newAdvancedService);
                    }
                    // Overwrites the old list with the new list.
                    manifest.dependencies.enabledAdvancedServices = newEnabledAdvancedServices;
                    return [4 /*yield*/, writeManifest(manifest)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.enableOrDisableAdvanceServiceInManifest = enableOrDisableAdvanceServiceInManifest;
