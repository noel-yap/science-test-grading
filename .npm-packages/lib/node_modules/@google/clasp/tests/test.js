"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var chai_1 = require("chai");
var fs = require("fs-extra");
var mocha_1 = require("mocha");
var tmp = require("tmp");
var files_1 = require("./../src/files");
var utils_js_1 = require("./../src/utils.js");
var functions_1 = require("./functions");
var constants_1 = require("./constants");
var spawnSync = require('child_process').spawnSync;
mocha_1.describe('Test --help for each function', function () {
    var expectHelp = function (command, expected) {
        var result = spawnSync(constants_1.CLASP, [command, '--help'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include(expected);
    };
    mocha_1.it('should run --help', function () { return expectHelp('run', 'Run a function in your Apps Scripts project'); });
    mocha_1.it('should logs --help', function () { return expectHelp('logs', 'Shows the StackDriver logs'); });
    mocha_1.it('should login --help', function () { return expectHelp('login', 'Log in to script.google.com'); });
    mocha_1.it('should logout --help', function () { return expectHelp('logout', 'Log out'); });
    mocha_1.it('should create --help', function () { return expectHelp('create', 'Create a script'); });
    mocha_1.it('should clone --help', function () { return expectHelp('clone', 'Clone a project'); });
    mocha_1.it('should pull --help', function () { return expectHelp('pull', 'Fetch a remote project'); });
    mocha_1.it('should push --help', function () { return expectHelp('push', 'Update the remote project'); });
    mocha_1.it('should status --help', function () { return expectHelp('status', 'Lists files that will be pushed by clasp'); });
    mocha_1.it('should open --help', function () { return expectHelp('open', 'Open a script'); });
    mocha_1.it('should deployments --help', function () { return expectHelp('deployments', 'List deployment ids of a script'); });
    mocha_1.it('should undeploy --help', function () { return expectHelp('undeploy', 'Undeploy a deployment of a project'); });
    mocha_1.it('should versions --help', function () { return expectHelp('versions', 'List versions of a script'); });
    mocha_1.it('should version --help', function () { return expectHelp('version', 'Creates an immutable version of the script'); });
    mocha_1.it('should list --help', function () { return expectHelp('list', 'List App Scripts projects'); });
    mocha_1.it('should apis --help', function () { return expectHelp('apis', 'List, enable, or disable APIs'); });
    mocha_1.it('should help --help', function () { return expectHelp('help', 'Display help'); });
});
mocha_1.describe('Test clasp list function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
    });
    mocha_1.it('should list clasp projects correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['list'], { encoding: 'utf8' });
        // Every project starts with this base URL, thus
        // using clasp list should at least contain this
        // in its output.
        chai_1.expect(result.stdout).to.contain('https://script.google.com/d/');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe('Test clasp create function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
    });
    mocha_1.it('should prompt for a project name correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync(constants_1.CLASP, ['create'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain(utils_js_1.LOG.CLONE_SCRIPT_QUESTION);
    });
    mocha_1.it('should not prompt for project name', function () {
        fs.writeFileSync('.clasp.json', '');
        var result = spawnSync(constants_1.CLASP, ['create'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Project file (.clasp.json) already exists.');
    });
    after(functions_1.cleanup);
});
mocha_1.describe.skip('Test clasp create <title> function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
    });
    mocha_1.it('should create a new project named <title> correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync(constants_1.CLASP, ['create', 'myTitle'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Created new script: https://script.google.com/d/');
        chai_1.expect(result.status).to.equal(0);
    });
});
mocha_1.describe('Test clasp clone <scriptId> function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should clone a project with scriptId correctly', function () {
        functions_1.cleanup();
        var result = spawnSync(constants_1.CLASP, ['clone', constants_1.SCRIPT_ID], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should clone a project with scriptURL correctly', function () {
        functions_1.cleanup();
        var result = spawnSync(constants_1.CLASP, ['clone', utils_js_1.URL.SCRIPT(constants_1.SCRIPT_ID)], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should give an error on a non-existing project', function () {
        fs.removeSync('./.clasp.json');
        var result = spawnSync(constants_1.CLASP, ['clone', 'non-existing-project'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.SCRIPT_ID);
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp pull function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should pull an existing project correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['pull'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp push function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it.skip('should push local project correctly', function () {
        fs.removeSync('.claspignore');
        fs.writeFileSync('Code.js', constants_1.TEST_CODE_JS);
        fs.writeFileSync('appsscript.json', constants_1.TEST_APPSSCRIPT_JSON);
        fs.writeFileSync('.claspignore', '**/**\n!Code.js\n!appsscript.json');
        var result = spawnSync(constants_1.CLASP, ['push'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Pushed');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it.skip('should return non-0 exit code when push failed', function () {
        fs.writeFileSync('.claspignore', '**/**\n!Code.js\n!appsscript.json\n!unexpected_file');
        fs.writeFileSync('unexpected_file', constants_1.TEST_CODE_JS);
        var result = spawnSync(constants_1.CLASP, ['push'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Invalid value at');
        chai_1.expect(result.stderr).to.contain('UNEXPECTED_FILE');
        chai_1.expect(result.stderr).to.contain('Files to push were:');
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp status function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    function setupTmpDirectory(filepathsAndContents) {
        fs.ensureDirSync('tmp');
        var tmpdir = tmp.dirSync({ unsafeCleanup: true, dir: 'tmp/', keep: false }).name;
        filepathsAndContents.forEach(function (_a) {
            var file = _a.file, data = _a.data;
            fs.outputFileSync(path.join(tmpdir, file), data);
        });
        return tmpdir;
    }
    mocha_1.it('should respect globs and negation rules', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.claspignore', data: '**/**\n!build/main.js\n!appsscript.json' },
            { file: 'build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON },
            { file: 'shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        spawnSync(constants_1.CLASP, ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.claspignore',
            'should/alsoBeIgnored',
            'shouldBeIgnored',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['build/main.js', 'appsscript.json']);
    });
    mocha_1.it('should ignore dotfiles if the parent folder is ignored', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.claspignore', data: '**/node_modules/**\n**/**\n!appsscript.json' },
            { file: 'appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON },
            { file: 'node_modules/fsevents/build/Release/.deps/Release/.node.d', data: constants_1.TEST_CODE_JS },
        ]);
        spawnSync(constants_1.CLASP, ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members([
            '.claspignore',
            'node_modules/fsevents/build/Release/.deps/Release/.node.d',
        ]);
        chai_1.expect(resultJson.filesToPush).to.have.members(['appsscript.json']);
    });
    mocha_1.it('should respect globs and negation rules when rootDir given', function () {
        var tmpdir = setupTmpDirectory([
            { file: '.clasp.json', data: '{ "scriptId":"1234", "rootDir":"dist" }' },
            { file: '.claspignore', data: '**/**\n!dist/build/main.js\n!dist/appsscript.json' },
            { file: 'dist/build/main.js', data: constants_1.TEST_CODE_JS },
            { file: 'dist/appsscript.json', data: constants_1.TEST_APPSSCRIPT_JSON },
            { file: 'dist/shouldBeIgnored', data: constants_1.TEST_CODE_JS },
            { file: 'dist/should/alsoBeIgnored', data: constants_1.TEST_CODE_JS },
        ]);
        spawnSync(constants_1.CLASP, ['create', '[TEST] clasp status'], { encoding: 'utf8', cwd: tmpdir });
        var result = spawnSync(constants_1.CLASP, ['status', '--json'], { encoding: 'utf8', cwd: tmpdir });
        chai_1.expect(result.status).to.equal(0);
        var resultJson = JSON.parse(result.stdout);
        chai_1.expect(resultJson.untrackedFiles).to.have.members(['dist/shouldBeIgnored', 'dist/should/alsoBeIgnored']);
        chai_1.expect(resultJson.filesToPush).to.have.members(['dist/build/main.js', 'dist/appsscript.json']);
        // TODO test with a rootDir with a relative directory like "../src"
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp open function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should prompt for which deployment to open correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['open'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain("Opening script: " + utils_js_1.URL.SCRIPT(constants_1.SCRIPT_ID));
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test URL utils function', function () {
    mocha_1.it('should create Script URL correctly', function () {
        var expectedUrl = "https://script.google.com/d/" + constants_1.SCRIPT_ID + "/edit";
        chai_1.expect(utils_js_1.URL.SCRIPT(constants_1.SCRIPT_ID)).to.equal(expectedUrl);
    });
    mocha_1.it('should create Creds URL correctly', function () {
        var expectedURL = "https://console.developers.google.com/apis/credentials?project=" + constants_1.SCRIPT_ID;
        chai_1.expect(utils_js_1.URL.CREDS(constants_1.SCRIPT_ID)).to.equal(expectedURL);
    });
});
mocha_1.describe('Test clasp deployments function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should list deployments correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['deployments'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Deployment');
        chai_1.expect(result.status).to.equal(0);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp deploy function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    // Could fail to to maximum deployments (20)
    // TODO: skip test if at maximum
    mocha_1.it('should deploy correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['deploy'], { encoding: 'utf8' });
        if (result.stderr) {
            var err1 = 'Scripts may only have up to 20 versioned deployments at a time';
            var err2 = 'Currently just one deployment can be created at a time';
            var re = "(?:" + err1 + "|" + err2 + ")";
            chai_1.expect([result.stderr]).to.match(new RegExp(re));
            chai_1.expect(result.status).to.equal(1);
        }
        else {
            chai_1.expect(result.stdout).to.contain('Created version ');
            chai_1.expect(result.status).to.equal(0);
        }
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp version and versions function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    var versionNumber = 0;
    mocha_1.it('should prompt for version description', function () {
        var result = spawnSync(constants_1.CLASP, ['version'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain(utils_js_1.LOG.GIVE_DESCRIPTION);
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should create a new version correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['version', 'xxx'], { encoding: 'utf8' });
        versionNumber =
            Number(result.stdout.substring(result.stdout.lastIndexOf(' '), result.stdout.length - 2));
        chai_1.expect(versionNumber).to.be.greaterThan(0);
    });
    mocha_1.it.skip('should list versions correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['versions'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Versions');
        if (versionNumber)
            chai_1.expect(result.stdout).to.contain(versionNumber + ' - ');
        chai_1.expect(result.status).to.equal(0);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp clone function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should prompt for which script to clone correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var result = spawnSync(constants_1.CLASP, ['clone'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('Clone which script?');
    });
    mocha_1.it('should prompt which project to clone and clone it', function () {
        functions_1.cleanup();
        var result = spawnSync(constants_1.CLASP, ['clone'], { encoding: 'utf8', input: '\n' });
        chai_1.expect(result.stdout).to.contain('Clone which script?');
        chai_1.expect(result.stdout).to.contain('Cloned');
        chai_1.expect(result.stdout).to.contain('files.');
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should give an error if .clasp.json already exists', function () {
        fs.writeFileSync('.clasp.json', '');
        var result = spawnSync(constants_1.CLASP, ['clone'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain('Project file (.clasp.json) already exists.');
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test setting function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should return current setting value', function () {
        var result = spawnSync(constants_1.CLASP, ['setting', 'scriptId'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.equal(process.env.SCRIPT_ID);
    });
    mocha_1.it('should update .clasp.json with provided value', function () {
        var result = spawnSync(constants_1.CLASP, ['setting', 'scriptId', 'test'], { encoding: 'utf8' });
        var fileContents = fs.readFileSync('.clasp.json', 'utf8');
        chai_1.expect(result.stdout).to.contain('Updated "scriptId":');
        chai_1.expect(result.stdout).to.contain('→ "test"');
        chai_1.expect(fileContents).to.contain('"test"');
    });
    mocha_1.it('should error on unknown keys', function () {
        // Test getting
        var result = spawnSync(constants_1.CLASP, ['setting', 'foo'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.UNKNOWN_KEY('foo'));
        // Test setting
        result = spawnSync(constants_1.CLASP, ['setting', 'bar', 'foo'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.UNKNOWN_KEY('bar'));
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test getAppsScriptFileName function from files', function () {
    mocha_1.it('should return the basename correctly', function () {
        chai_1.expect(files_1.getAppsScriptFileName('./', 'appsscript.json')).to.equal('appsscript');
        chai_1.expect(files_1.getAppsScriptFileName('', 'appsscript.json')).to.equal('appsscript');
        chai_1.expect(files_1.getAppsScriptFileName('./dist', './dist/appsscript.json')).to.equal('appsscript');
        chai_1.expect(files_1.getAppsScriptFileName('./dist', './dist/foo/Code.js')).to.equal('foo/Code');
    });
});
mocha_1.describe('Test URL helper from utils', function () {
    mocha_1.it('should return the scriptURL correctly', function () {
        var url = utils_js_1.URL.SCRIPT('abcdefghijklmnopqrstuvwxyz');
        chai_1.expect(url).to.equal('https://script.google.com/d/abcdefghijklmnopqrstuvwxyz/edit');
    });
});
mocha_1.describe('Test getWebApplicationURL function from utils', function () {
    mocha_1.it('should return the scriptURL correctly', function () {
        var url = utils_js_1.getWebApplicationURL({
            entryPoints: [
                {
                    entryPointType: 'WEB_APP',
                    webApp: {
                        url: 'https://script.google.com/macros/s/abcdefghijklmnopqrstuvwxyz/exec',
                    },
                },
            ],
        });
        chai_1.expect(url).to.equal('https://script.google.com/macros/s/abcdefghijklmnopqrstuvwxyz/exec');
    });
});
mocha_1.describe('Test getDefaultProjectName function from utils', function () {
    mocha_1.it('should return the current directory name correctly', function () {
        chai_1.expect(utils_js_1.getDefaultProjectName()).to.equal('Clasp');
    });
});
mocha_1.describe('Test getFileType function from utils', function () {
    mocha_1.it('should return the lowercase file type correctly', function () {
        chai_1.expect(files_1.getFileType('SERVER_JS')).to.equal('js');
        chai_1.expect(files_1.getFileType('GS')).to.equal('gs');
        chai_1.expect(files_1.getFileType('JS')).to.equal('js');
        chai_1.expect(files_1.getFileType('HTML')).to.equal('html');
    });
    mocha_1.it('should return the specified file extention if the file type is SERVER_JS', function () {
        chai_1.expect(files_1.getFileType('SERVER_JS', 'gs')).to.equal('gs');
        chai_1.expect(files_1.getFileType('GS', 'js')).to.equal('gs');
        chai_1.expect(files_1.getFileType('JS', 'gs')).to.equal('js');
        chai_1.expect(files_1.getFileType('HTML', 'js')).to.equal('html');
    });
});
mocha_1.describe('Test getAPIFileType function from utils', function () {
    mocha_1.it('should return the uppercase file type correctly', function () {
        chai_1.expect(utils_js_1.getAPIFileType('file.GS')).to.equal('SERVER_JS');
        chai_1.expect(utils_js_1.getAPIFileType('file.JS')).to.equal('SERVER_JS');
        chai_1.expect(utils_js_1.getAPIFileType('file.js')).to.equal('SERVER_JS');
        chai_1.expect(utils_js_1.getAPIFileType('file.jsx')).to.equal('JSX');
        chai_1.expect(utils_js_1.getAPIFileType('file.js.html')).to.equal('HTML');
    });
});
mocha_1.describe('Test saveProject function from utils', function () {
    mocha_1.it('should save the scriptId correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var isSaved = function () { return __awaiter(_this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_js_1.saveProject({ scriptId: '12345' })];
                    case 1:
                        _a.sent();
                        id = fs.readFileSync(path.join(__dirname, '/../.clasp.json'), 'utf8');
                        chai_1.expect(id).to.equal('{"scriptId":"12345"}');
                        return [2 /*return*/];
                }
            });
        }); };
        chai_1.expect(isSaved).to.not.equal(null);
    });
    mocha_1.it('should save the scriptId, rootDir correctly', function () {
        spawnSync('rm', ['.clasp.json']);
        var isSaved = function () { return __awaiter(_this, void 0, void 0, function () {
            var id;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, utils_js_1.saveProject({ scriptId: '12345', rootDir: './dist' })];
                    case 1:
                        _a.sent();
                        id = fs.readFileSync(path.join(__dirname, '/../.clasp.json'), 'utf8');
                        chai_1.expect(id).to.equal('{"scriptId":"12345","rootDir":"./dist"}');
                        return [2 /*return*/];
                }
            });
        }); };
        chai_1.expect(isSaved).to.not.equal(null);
    });
});
mocha_1.describe('Test clasp apis functions', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should list apis correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['apis', 'list'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain('# Currently enabled APIs:');
        chai_1.expect(result.stdout).to.contain('# List of available APIs:');
    });
    mocha_1.it('should ask for an API when trying to enable', function () {
        var result = spawnSync(constants_1.CLASP, ['apis', 'enable'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain('An API name is required.');
    });
    mocha_1.it('should enable sheets', function () {
        var result = spawnSync(constants_1.CLASP, ['apis', 'enable', 'sheets'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain('Enabled sheets API.');
    });
    mocha_1.it('should give error message for non-existent API', function () {
        var result = spawnSync(constants_1.CLASP, ['apis', 'enable', 'fakeApi'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain('API fakeApi doesn\'t exist. Try \'clasp apis enable sheets\'.');
    });
    mocha_1.it('should ask for an API when trying to disable', function () {
        var result = spawnSync(constants_1.CLASP, ['apis', 'disable'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain('An API name is required.');
    });
    mocha_1.it('should disable apis correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['apis', 'disable', 'sheets'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain('Disabled sheets API.');
    });
    mocha_1.it('should show suggestions for using clasp apis', function () {
        var result = spawnSync(constants_1.CLASP, ['apis'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain("# Try these commands:\n- clasp apis list\n- clasp apis enable slides\n- clasp apis disable slides");
    });
    mocha_1.it('should error with unknown subcommand', function () {
        var result = spawnSync(constants_1.CLASP, ['apis', 'unknown'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        chai_1.expect(result.stderr).to.contain("Unknown command");
    });
    after(functions_1.cleanup);
});
mocha_1.describe.skip('Test clasp logs function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should prompt for logs setup', function () {
        var result = spawnSync(constants_1.CLASP, ['logs'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('What is your GCP projectId?');
    });
    mocha_1.it('should prompt for logs setup', function () {
        var result = spawnSync(constants_1.CLASP, ['logs', '--setup'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.contain('Open this link:');
        chai_1.expect(result.stdout).to.include("https://script.google.com/d/" + constants_1.SCRIPT_ID + "/edit");
        chai_1.expect(result.stdout).to.contain('Go to *Resource > Cloud Platform Project...*');
        chai_1.expect(result.stdout).to.include('and copy your projectId\n(including "project-id-")');
        chai_1.expect(result.stdout).to.contain('What is your GCP projectId?');
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp login function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    beforeEach(functions_1.backupSettings);
    afterEach(functions_1.restoreSettings);
    mocha_1.it('should exit(0) with LOG.DEFAULT_CREDENTIALS for default login (no global or local rc)', function () {
        if (fs.existsSync(constants_1.CLASP_PATHS.rcGlobal))
            fs.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        if (fs.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs.removeSync(constants_1.CLASP_PATHS.rcLocal);
        var result = spawnSync(constants_1.CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain(utils_js_1.LOG.LOGIN(false));
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should ERROR.LOGGED_IN if global rc and no --creds option but continue to login', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.FAKE_CLASPRC.token);
        var result = spawnSync(constants_1.CLASP, ['login', '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.LOGGED_IN_GLOBAL);
        chai_1.expect(result.status).to.equal(0);
    });
    mocha_1.it('should exit(0) with ERROR.LOGGED_IN if local rc and --creds option', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.rcLocal, constants_1.FAKE_CLASPRC.local);
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.rcLocal);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.LOGGED_IN_LOCAL);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it.skip('should exit(1) with ERROR.CREDENTIALS_DNE if --creds file does not exist', function () {
        if (fs.existsSync(constants_1.CLASP_PATHS.clientCredsLocal))
            fs.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.CREDENTIALS_DNE(constants_1.CLASP_PATHS.clientCredsLocal));
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it.skip('should exit(1) with ERROR.BAD_CREDENTIALS_FILE if --creds file invalid', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, constants_1.CLIENT_CREDS.invalid);
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it.skip('should exit(0) with ERROR.BAD_CREDENTIALS_FILE if --creds file corrupt json', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, functions_1.rndStr());
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.BAD_CREDENTIALS_FILE);
        chai_1.expect(result.status).to.equal(1);
    });
    mocha_1.it('should exit(1) with LOG.CREDS_FROM_PROJECT if global rc and --creds file valid', function () {
        if (fs.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs.removeSync(constants_1.CLASP_PATHS.rcLocal);
        fs.writeFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.FAKE_CLASPRC.token);
        fs.writeFileSync(constants_1.CLASP_PATHS.clientCredsLocal, constants_1.CLIENT_CREDS.fake);
        var result = spawnSync(constants_1.CLASP, ['login', '--creds', "" + constants_1.CLASP_PATHS.clientCredsLocal, '--no-localhost'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        fs.removeSync(constants_1.CLASP_PATHS.clientCredsLocal);
        chai_1.expect(result.stdout).to.contain(utils_js_1.LOG.LOGIN(true));
        chai_1.expect(result.status).to.equal(1);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test clasp logout function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    beforeEach(functions_1.backupSettings);
    afterEach(functions_1.restoreSettings);
    mocha_1.it('should remove global AND local credentails', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.rcGlobal, constants_1.FAKE_CLASPRC.token);
        fs.writeFileSync(constants_1.CLASP_PATHS.rcLocal, constants_1.FAKE_CLASPRC.local);
        var result = spawnSync(constants_1.CLASP, ['logout'], { encoding: 'utf8' });
        chai_1.expect(fs.existsSync(constants_1.CLASP_PATHS.rcGlobal)).to.equal(false);
        chai_1.expect(utils_js_1.hasOauthClientSettings()).to.equal(false);
        chai_1.expect(fs.existsSync(constants_1.CLASP_PATHS.rcLocal)).to.equal(false);
        chai_1.expect(utils_js_1.hasOauthClientSettings(true)).to.equal(false);
        chai_1.expect(result.status).to.equal(0);
    });
    after(functions_1.cleanup);
});
// Skipping for now because you still need to deploy function using GUI
mocha_1.describe.skip('Test clasp run function', function () {
    before(function () {
        if (constants_1.IS_PR) {
            this.skip();
        }
        functions_1.setup();
    });
    mocha_1.it('should prompt for project ID', function () {
        var result = spawnSync(constants_1.CLASP, ['run', 'myFunction'], { encoding: 'utf8' });
        chai_1.expect(result.stdout).to.contain('What is your GCP projectId?');
    });
    mocha_1.it('should prompt to set up new OAuth client', function () {
        fs.writeFileSync(constants_1.CLASP_PATHS.settingsLocal, constants_1.CLASP_SETTINGS.invalid);
        var result = spawnSync(constants_1.CLASP, ['run', 'myFunction'], { encoding: 'utf8' });
        fs.removeSync(constants_1.CLASP_PATHS.settingsLocal);
        chai_1.expect(result.stdout)
            .to.contain('https://console.developers.google.com/apis/credentials?project=');
        chai_1.expect(result.status).to.equal(0);
    });
    after(functions_1.cleanup);
});
mocha_1.describe('Test variations of clasp help', function () {
    var expectHelp = function (variation) {
        var result = spawnSync(constants_1.CLASP, [variation], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include(constants_1.CLASP_USAGE);
    };
    mocha_1.it('should show help for clasp help', function () { return expectHelp('help'); });
    mocha_1.it('should show help for clasp --help', function () { return expectHelp('--help'); });
    mocha_1.it('should show help for clasp -h', function () { return expectHelp('-h'); });
});
mocha_1.describe('Test variations of clasp --version', function () {
    var expectVersion = function (variation) {
        var result = spawnSync(constants_1.CLASP, [variation], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(0);
        chai_1.expect(result.stdout).to.include(require('./../package.json').version);
    };
    mocha_1.it('should show version for clasp --version', function () { return expectVersion('--version'); });
    mocha_1.it('should show version for clasp -v', function () { return expectVersion('-v'); });
});
mocha_1.describe('Test unknown functions', function () {
    mocha_1.it('should show version correctly', function () {
        var result = spawnSync(constants_1.CLASP, ['unknown'], { encoding: 'utf8' });
        chai_1.expect(result.stderr).to.contain("Unknown command");
        chai_1.expect(result.status).to.equal(1);
    });
});
mocha_1.describe('Test all functions while logged out', function () {
    before(function () {
        if (fs.existsSync(constants_1.CLASP_PATHS.rcGlobal))
            fs.removeSync(constants_1.CLASP_PATHS.rcGlobal);
        if (fs.existsSync(constants_1.CLASP_PATHS.rcLocal))
            fs.removeSync(constants_1.CLASP_PATHS.rcLocal);
    });
    var expectNoCredentials = function (command) {
        var result = spawnSync(constants_1.CLASP, [command], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // expect(result.stderr).to.include(ERROR.NO_CREDENTIALS);
    };
    mocha_1.it('should fail to list (no credentials)', function () { return expectNoCredentials('list'); });
    mocha_1.it('should fail to clone (no credentials)', function () { return expectNoCredentials('clone'); });
    mocha_1.it('should fail to push (no credentials)', function () { return expectNoCredentials('push'); });
    mocha_1.it('should fail to deployments (no credentials)', function () { return expectNoCredentials('deployments'); });
    mocha_1.it('should fail to deploy (no credentials)', function () { return expectNoCredentials('deploy'); });
    mocha_1.it('should fail to version (no credentials)', function () { return expectNoCredentials('version'); });
    mocha_1.it('should fail to versions (no credentials)', function () { return expectNoCredentials('versions'); });
    // TODO: all test should have same order of checks
    // and should all return ERROR.NO_CREDENTIALS
    mocha_1.it('should fail to pull (no .clasp.json file)', function () {
        var result = spawnSync(constants_1.CLASP, ['pull'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // Should be ERROR.NO_CREDENTIALS
        // see: https://github.com/google/clasp/issues/278
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.SETTINGS_DNE);
    });
    mocha_1.it('should fail to open (no .clasp.json file)', function () {
        var result = spawnSync(constants_1.CLASP, ['open'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // Should be ERROR.NO_CREDENTIALS
        // see: https://github.com/google/clasp/issues/278
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.SETTINGS_DNE);
    });
    mocha_1.it('should fail to show logs (no .clasp.json file)', function () {
        var result = spawnSync(constants_1.CLASP, ['logs'], { encoding: 'utf8' });
        chai_1.expect(result.status).to.equal(1);
        // Should be ERROR.NO_CREDENTIALS
        // see: https://github.com/google/clasp/issues/278
        chai_1.expect(result.stderr).to.contain(utils_js_1.ERROR.SETTINGS_DNE);
    });
});
